kind: Deployment
apiVersion: apps/v1beta1
metadata:
  name: platform-web
  labels:
    app: platform
    type: web
spec:
  replicas: {{ REPLICAS }}
  selector:
    matchLabels:
      app: platform
      type: web
  progressDeadlineSeconds: 600
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 50%
    type: RollingUpdate

  template:
    metadata:
      labels:
        buildtime: {{ BUILDTIME }}
        app: platform
        type: web
    spec:
      terminationGracePeriodSeconds: 330
      imagePullSecrets:
        - name: syncano-k8s-pull-secret
      containers:
        - name: web
          image: {{ DOCKERIMAGE }}:{{ VERSION }}
          securityContext:
            privileged: true
          resources:
            requests:
              memory: "1024Mi"
              cpu: 0.5
            limits:
              memory: "1536Mi"
              cpu: 1
          ports:
            - name: uwsgi
              containerPort: 8000
            - name: uwsgi-long
              containerPort: 8001
          env:
            - name: INSTANCE_TYPE
              value: web
          envFrom:
            - configMapRef:
                name: platform
            - secretRef:
                name: platform
          livenessProbe:
            httpGet:
              path: /healthz/
              port: 8100
            initialDelaySeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz/
              port: 8100
            initialDelaySeconds: 5
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - >-
                    touch /tmp/uwsgi_stop &&
                    uwsgi --reload /tmp/uwsgi.pid &&
                    uwsgi --reload /tmp/uwsgi_long.ini &&
                    uwsgi --reload /tmp/uwsgi_offload.pid

{%- if GCP_LOCATIONS %}
          volumeMounts:
  {%- for item in GCP_LOCATIONS.split(',') %}
            - name: {{ item }}-storage-credentials
              mountPath: /secrets/{{ item }}-storage
              readOnly: true
  {%- endfor %}
{%- endif %}
{%- if GCP_LOCATIONS %}
      volumes:
  {%- for item in GCP_LOCATIONS.split(',') %}
        - name: {{ item }}-storage-credentials
          secret:
            secretName: {{ item }}-storage-credentials
  {%- endfor %}
{%- endif %}
